using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data.SqlClient;
using System.Data;

namespace ProjectOne_Class_library
{
    public class SQL
    {
        const string CON_STR = "Data Source=.;Initial Catalog=Sofia;Integrated Security=True";

        //TODO Call GetUser withint AddNewUser to check if already existing
        //Adding new user containing all information needed, by default new user is not admin (bit = 0).
        public int AddNewUser(string username, string password, string firstname, string lastname, string street, string zip, string city, string country, string phonenumber, string email, int bit = 0)
        {
            int newUserID = 0;

            User temp = GetUser(username, password);
            if (temp == null)
            {

                SqlConnection myConnection = new SqlConnection(CON_STR);
                try
                {
                    myConnection.Open();
                    SqlCommand myCommand = new SqlCommand("CreateUser", myConnection);
                    myCommand.CommandType = CommandType.StoredProcedure;

                    SqlParameter addUserID = new SqlParameter("@OutputID", SqlDbType.Int);
                    addUserID.Direction = ParameterDirection.Output;
                    SqlParameter addUserName = new SqlParameter("@Username", SqlDbType.VarChar);
                    addUserName.Value = username;
                    SqlParameter addPassword = new SqlParameter("@Password", SqlDbType.VarChar);
                    addPassword.Value = password;
                    SqlParameter addFirstname = new SqlParameter("@Firstname", SqlDbType.VarChar);
                    addFirstname.Value = firstname;
                    SqlParameter addLastname = new SqlParameter("@Lastname", SqlDbType.VarChar);
                    addLastname.Value = lastname;
                    SqlParameter addStreet = new SqlParameter("@Street", SqlDbType.VarChar);
                    addStreet.Value = street;
                    SqlParameter addZip = new SqlParameter("@Zip", SqlDbType.VarChar);
                    addZip.Value = zip;
                    SqlParameter addCity = new SqlParameter("@City", SqlDbType.VarChar);
                    addCity.Value = city;
                    SqlParameter addCountry = new SqlParameter("@Country", SqlDbType.VarChar);
                    addCountry.Value = country;
                    SqlParameter addPhoneNumber = new SqlParameter("@PhoneNumber", SqlDbType.VarChar);
                    addPhoneNumber.Value = phonenumber;
                    SqlParameter addEmail = new SqlParameter("@Email", SqlDbType.VarChar);
                    addEmail.Value = email;
                    SqlParameter addBit = new SqlParameter("@IsAdmin", SqlDbType.Bit);
                    addBit.Value = bit;

                    myCommand.Parameters.Add(addUserID);
                    myCommand.Parameters.Add(addFirstname);
                    myCommand.Parameters.Add(addLastname);
                    myCommand.Parameters.Add(addUserName);
                    myCommand.Parameters.Add(addPassword);
                    myCommand.Parameters.Add(addStreet);
                    myCommand.Parameters.Add(addZip);
                    myCommand.Parameters.Add(addCity);
                    myCommand.Parameters.Add(addCountry);
                    myCommand.Parameters.Add(addPhoneNumber);
                    myCommand.Parameters.Add(addEmail);
                    myCommand.Parameters.Add(addBit);

                    myCommand.ExecuteNonQuery();
                    newUserID = Convert.ToInt32(addUserID.Value);

                }
                catch
                {
                    throw;
                }
                finally
                {
                    myConnection.Close();
                }
            }

            return newUserID;
        }
        //Get User with matching username and password
        public User GetUser(string username, string password)
        {
            User tempUser = null;
            SqlConnection myConnection = new SqlConnection(CON_STR);

            try
            {
                myConnection.Open();
                SqlCommand myCommand = new SqlCommand("getUser", myConnection);
                myCommand.CommandType = CommandType.StoredProcedure;
                //Select all information from the user with the matching username and password
                SqlParameter myUserName = new SqlParameter("@username", SqlDbType.VarChar);
                myUserName.Value = username;
                SqlParameter myPassword = new SqlParameter("@password", SqlDbType.VarChar);
                myPassword.Value = password;

                myCommand.Parameters.Add(myUserName);
                myCommand.Parameters.Add(myPassword);

                SqlDataReader myReader;

                myReader = myCommand.ExecuteReader();

                while (myReader.Read())
                {
                    try
                    {
                        //TODO Add Phonenumber if not Null or default
                        //Create new User based on all information in User Table SQL
                        tempUser = new User(Convert.ToInt32(myReader["UserID"]), myReader["FirstName"].ToString(), myReader["LastName"].ToString(), myReader["Street"].ToString(), myReader["Zip"].ToString(), myReader["City"].ToString(), myReader["Country"].ToString(), myReader["Email"].ToString(), Convert.ToInt32(myReader["IsAdmin"]));
                    }
                    catch (Exception)
                    {
                        throw;
                    }
                }

            }
            catch
            {

            }
            finally
            {
                myConnection.Close();
            }
            //return the created User to be able to use information as session
            return tempUser;
        }

        public void GetAllProducts()
        {
            List<Product> products = new List<Product>();

            SqlConnection myConnection = new SqlConnection();
            try
            {
                myConnection.Open();
                SqlCommand myCommand = new SqlCommand("SELECT * FROM products", myConnection);
                SqlDataReader myReader = myCommand.ExecuteReader();

                while (myReader.Read())
                {
                    products.Add(new Product(Convert.ToInt32(myReader["productID"]), Convert.ToDouble(myReader["price"]), Convert.ToInt32(myReader["stock"]), myReader["shortDescription"].ToString(), myReader["longDescription"].ToString(), Convert.ToDouble(myReader["vatTag"])));
                }
            }
            catch (Exception)
            {

                throw;
            }
            finally
            {
                myConnection.Close();
            }
        }

        //TODO Add method to add product and get product

        //public void GetAllOrder(int UserID, string Username, string UserPassword, string FirstName, string LastName, string Street, string Zip, string Country,
        //              string PhoneNumber, string Email, string isAdmin, int OrderID, string OrderStatus, DateTime OrderDate, int VatID, double VatTagMoney,
        //              int ProductID, double Price, int Stock, string ShortDescription, string LongDescription, int UserQuantity, int ProductListID, int ActiveUser)

        public void GetAllOrder(int UserID)
        {

            SqlConnection myConnection = new SqlConnection(CON_STR);

            try
            {
                myConnection.Open();

                SqlCommand myCommand = new SqlCommand($"Select * from FullOverView where UserID = @UserID", myConnection);  //$"Select * from FullOverView where UserID = @UserID", får tillbaka en rad /userID

                #region Parameters
                SqlParameter parameterUserID = new SqlParameter("@UserID", SqlDbType.Int);
                parameterUserID.Value = UserID;

                //SqlParameter parameterUsername = new SqlParameter("@Username", SqlDbType.VarChar);
                //parameterUsername.Value = Username;

                //SqlParameter parameterUserPassword = new SqlParameter("@UserPassword", SqlDbType.VarChar);
                //parameterUserPassword.Value = UserPassword;

                //SqlParameter parameterFirstName = new SqlParameter("@FirstName", SqlDbType.VarChar);
                //parameterFirstName.Value = FirstName;

                //SqlParameter parameterLastName = new SqlParameter("@LastName", SqlDbType.VarChar);
                //parameterLastName.Value = LastName;

                //SqlParameter parameterStreet = new SqlParameter("@Street", SqlDbType.VarChar);
                //parameterStreet.Value = LastName;

                //SqlParameter parameterZip = new SqlParameter("@Zip", SqlDbType.VarChar);
                //parameterZip.Value = Zip;

                //SqlParameter parameterCountry = new SqlParameter("@Country", SqlDbType.VarChar);
                //parameterCountry.Value = Country;

                //SqlParameter parameterPhoneNumber = new SqlParameter("@PhoneNumber", SqlDbType.VarChar);
                //parameterPhoneNumber.Value = PhoneNumber;

                //SqlParameter parameterEmail = new SqlParameter("@Email", SqlDbType.VarChar);
                //parameterEmail.Value = Email;

                //SqlParameter parameterisAdmin = new SqlParameter("@isAdmin", SqlDbType.Bit);
                //parameterisAdmin.Value = isAdmin; 

                //SqlParameter parameterOrderID = new SqlParameter("@OrderID", SqlDbType.Int);
                //parameterOrderID.Value = OrderID;

                //SqlParameter parameterOrderStatus = new SqlParameter("@OrderStatus", SqlDbType.VarChar);
                //parameterOrderStatus.Value = OrderStatus;

                //SqlParameter parameterOrderDate = new SqlParameter("@OrderDate", SqlDbType.SmallDateTime);
                //parameterOrderDate.Value = OrderStatus;

                //SqlParameter parameterVatID = new SqlParameter("@VatID", SqlDbType.Int);
                //parameterVatID.Value = VatID;

                //SqlParameter parameterVatTagMoney = new SqlParameter("@VatTagMoney", SqlDbType.Money);
                //parameterVatTagMoney.Value = VatTagMoney;

                //SqlParameter parameterProductID = new SqlParameter("@ProductID", SqlDbType.Int);
                //parameterProductID.Value = ProductID;

                //SqlParameter parameterPrice = new SqlParameter("@Price", SqlDbType.Money); 
                //parameterPrice.Value = Price;

                //SqlParameter parameterStock = new SqlParameter("@Stock", SqlDbType.Int);
                //parameterStock.Value = Price;

                //SqlParameter parameterShortDescription = new SqlParameter("@ShortDescription", SqlDbType.VarChar);
                //parameterShortDescription.Value = ShortDescription;

                //SqlParameter parameterLongDescription = new SqlParameter("@LongDescription", SqlDbType.VarChar);
                //parameterLongDescription.Value = LongDescription;

                //SqlParameter parameterUserQuantity = new SqlParameter("@UserQuantity", SqlDbType.Int);
                //parameterUserQuantity.Value = UserQuantity;

                //SqlParameter parameterProductListID = new SqlParameter("@ProductListID", SqlDbType.Int);
                //parameterProductListID.Value = ProductListID;

                //SqlParameter parameterActiveUser = new SqlParameter("@ActiveUser", SqlDbType.Int);
                //parameterActiveUser.Value = ActiveUser;




                #endregion

                myCommand.Parameters.Add(parameterUserID);
                //myCommand.Parameters.Add(parameterUsername);
                //myCommand.Parameters.Add(parameterUserPassword);
                //myCommand.Parameters.Add(parameterFirstName);
                //myCommand.Parameters.Add(parameterLastName);
                //myCommand.Parameters.Add(parameterStreet);
                //myCommand.Parameters.Add(parameterZip);
                //myCommand.Parameters.Add(parameterCountry);
                //myCommand.Parameters.Add(parameterPhoneNumber);
                //myCommand.Parameters.Add(parameterisAdmin);

                //myCommand.Parameters.Add(parameterOrderID);
                //myCommand.Parameters.Add(parameterOrderStatus);
                //myCommand.Parameters.Add(parameterOrderDate);

                //myCommand.Parameters.Add(parameterVatID);
                //myCommand.Parameters.Add(parameterVatTagMoney);

                //myCommand.Parameters.Add(parameterProductID);
                //myCommand.Parameters.Add(parameterPrice);
                //myCommand.Parameters.Add(parameterStock);
                //myCommand.Parameters.Add(parameterShortDescription);

                //myCommand.Parameters.Add(parameterUserQuantity);
                //myCommand.Parameters.Add(parameterProductListID);
                //myCommand.Parameters.Add(parameterActiveUser);


                SqlDataReader reader = myCommand.ExecuteReader();

                while(reader.Read())
                {
                    Console.WriteLine($"{reader["Username"].ToString()} {reader["UserPassword"].ToString()} {reader["FirstName"].ToString()}");

                    //Console.WriteLine(reader["FirstName"].ToString());
                }

                reader.Close();
                myCommand.Dispose();
            }
            finally
            {

                myConnection.Close();
            }

        }



    }

}

*****************************************************************************************************************************

 static public List<Order> GetAllOrders(int UserID)
        {
            List<Order> orders = new List<Order>();
     
            SqlConnection myConnection = new SqlConnection(CON_STR);

            try
            {
                myConnection.Open();

                SqlCommand myCommand = new SqlCommand("GetOrders", myConnection); // Option: Select* from FullOverView where UserID = @UserID
                myCommand.CommandType = CommandType.StoredProcedure;

                SqlParameter parameterUserID = new SqlParameter("@UserID", SqlDbType.Int);

                parameterUserID.Value = UserID;

                myCommand.Parameters.Add(parameterUserID);

                SqlDataReader myReader = myCommand.ExecuteReader();

                while (myReader.Read())
                {

                    orders.Add(new Order(Convert.ToInt32(myReader["ProductID"]), Convert.ToInt32(myReader["UserID"]), myReader["OrderStatus"].ToString(), DateTime.Parse(myReader["OrderDate"].ToString())));


                }

                myReader.Close();
                myCommand.Dispose();

            }

            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            finally
            {

                myConnection.Close();
            }
            return orders;
        }
